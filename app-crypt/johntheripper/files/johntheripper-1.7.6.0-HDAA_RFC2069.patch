--- john-1.7.3.4/src/HDAA_fmt.c	2009-11-22 19:52:08.000000000 +0100
+++ john-1.7.3.4.new/src/HDAA_fmt.c	2009-11-22 15:31:32.000000000 +0100
@@ -285,6 +285,7 @@
 	int		i;
 	char		**request;
 	char		*str;
+	char		*match;
 	reqinfo_t	*r;
 #ifdef __MMX__
 	__m64		h2[2];
@@ -304,6 +305,13 @@
 		}
 	}
 
+	/* 
+	 	As SIP uris may contain : (the field separator), do special handling
+		Convert _ to :
+	*/
+	if ( NULL != ( match = strstr(request[R_URI], "sip_") ) )
+		match[3] = ':';
+
 	/* calculate h2 (h2 = md5(method:digestURI))*/
 	str = malloc(strlen(request[R_METHOD]) + strlen(request[R_URI]) + 2);
 	sprintf(str, "%s:%s", request[R_METHOD], request[R_URI]);
@@ -318,10 +326,21 @@
 	/* create a part of h1 (h1tmp = request:realm:)*/
 	snprintf(r->h1tmp, HTMP - PLAINTEXT_LENGTH, "%s:%s:", request[R_USER], request[R_REALM]);
 
-	/* create a part of h3 (h3tmp = nonce:noncecount:clientnonce:qop:h2)*/
-	snprintf(&r->h3tmp[CIPHERTEXT_LENGTH], HTMP - CIPHERTEXT_LENGTH, ":%s:%s:%s:%s:%s",
-		request[R_NONCE], request[R_NONCECOUNT], request[R_CLIENTNONCE],
-		request[R_QOP], (char*)conv);
+	/* If format is according to RFC 2069 */
+	if ( NULL == request[R_QOP] )
+	{
+		/* create a part of h3 (h3tmp = nonce:h2)*/
+		snprintf(&r->h3tmp[CIPHERTEXT_LENGTH], HTMP - CIPHERTEXT_LENGTH, ":%s:%s",
+			request[R_NONCE], (char*)conv);
+	}
+	else
+	{
+		/* create a part of h3 (h3tmp = nonce:noncecount:clientnonce:qop:h2)*/
+		snprintf(&r->h3tmp[CIPHERTEXT_LENGTH], HTMP - CIPHERTEXT_LENGTH, ":%s:%s:%s:%s:%s",
+			request[R_NONCE], request[R_NONCECOUNT], request[R_CLIENTNONCE],
+			request[R_QOP], (char*)conv);
+	}
+	
 	r->request = request;
 	r->h1tmplen = strlen(r->h1tmp);
 	r->h3tmplen = strlen(&r->h3tmp[CIPHERTEXT_LENGTH]) + CIPHERTEXT_LENGTH;
